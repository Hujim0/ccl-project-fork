%PARSER%

GOAL:
    GLOBAL_DECLARATIONS

GLOBAL_DECLARATIONS:
    GLOBAL_DECLARATIONS GLOBAL_DECLARATION
    | GLOBAL_DECLARATION
    | EPSILON

GLOBAL_DECLARATION:
    FUNCTION_DECLARATION
    | PARSER_RULE
    | LEXER_RULE
    | VARIABLE_DECLARATION ";"

LEXER_RULE:
    "lexer" IDENTIFIER
    "{"
        LEXER_RULE_BODY
    "}"

LEXER_RULE_BODY:
    LEXER_RULE_BODY "," EXPRESSION
    | EXPRESSION
    | EPSILON

PARSER_RULE:
    "parser" IDENTIFIER
    "{"
        PARSER_RULE_BODY
    "}"

PARSER_RULE_BODY:
    PARSER_RULES ";" PARSER_FUNCTIONS

PARSER_FUNCTIONS:
    PARSER_FUNCTIONS FUNCTION_DECLARATION
    | FUNCTION_DECLARATION
    | EPSILON

PARSER_RULES:
    PARSER_RULES "," EXPRESSION
    | EXPRESSION
    | EPSILON

FUNCTION_DECLARATION:
    "def" IDENTIFIER "(" FUNCTION_DECLARATION_ARGUMENTS ")"
    "{"
        STATEMENTS
    "}"

FUNCTION_DECLARATION_ARGUMENTS:
    FUNCTION_DECLARATION_ARGUMENTS "," FUNCTION_DECLARATION_ARGUMENT
    | FUNCTION_DECLARATION_ARGUMENT
    | EPSILON

FUNCTION_DECLARATION_ARGUMENT:
    IDENTIFIER ":" TYPE

STATEMENTS:
    STATEMENTS STATEMENT
    | STATEMENT
    | EPSILON

STATEMENT:
    EXPRESSION ";"
    | VARIABLE_DECLARATION ";"
    | VARIABLE_DECLARATION_WITH_TYPE ";"
    | FOR_LOOP
    | IF_STATEMENT

IF_STATEMENT:
    IF_BLOCK
    ELIF_BLOCK
    ELSE_BLOCK

IF_BLOCK:
    "if" EXPRESSION
    "{"
        STATEMENTS
    "}"

ELIF_BLOCK:
    ELIF_BLOCK
    "elif" EXPRESSION
    "{"
        STATEMENTS
    "}"
    | EPSILON

ELSE_BLOCK:
    "else"
    "{"
        STATEMENTS
    "}"
    | EPSILON

VARIABLE_DECLARATION:
    "var" IDENTIFIER "=" EXPRESSION

VARIABLE_DECLARATION_WITH_TYPE:
    "var" IDENTIFIER ":" TYPE "=" EXPRESSION

FOR_LOOP:
    "for" IDENTIFIER "in" EXPRESSION
    "{"
        STATEMENTS
    "}"

EXPRESSION:
    EXPRESSION "+" TERM
    | EXPRESSION "-" TERM
    | TERM

TERM:
    TERM "*" VALUE
    | TERM "/" VALUE
    | VALUE

VALUE:
    "-" VALUE
    | "+" VALUE
    | FACTOR

FUNCTION_CALL:
    FACTOR "(" FUNCTION_CALL_ARGUMENTS ")"

FUNCTION_CALL_ARGUMENTS:
    FUNCTION_CALL_ARGUMENTS "," EXPRESSION
    | EXPRESSION
    | EPSILON

METHOD_CALL:
    FACTOR "." IDENTIFIER "(" FUNCTION_CALL_ARGUMENTS ")"

FACTOR:
    NUMBER
    | IDENTIFIER
    | STRING
    | FUNCTION_CALL
    | METHOD_CALL
    | "(" EXPRESSION ")"

TYPE:
    DEFAULT_TYPES
    | DEFAULT_TYPES "[" TYPE "]"

DEFAULT_TYPES:
    "int"
    | "node"
    | "uint"
    | "float"
    | "string"
    | "bool"
    | "list"
    | "union"

%LEXER%
IDENTIFIER: [a-zA-Z_] [a-zA-Z0-9_]*
NUMBER:     [0-9]+
STRING:     ! ["] ["]^* ["]
